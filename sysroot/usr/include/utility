#pragma once

// template<class T> using Invoke = typename T::type;

// template<unsigned...> struct seq{ using type = seq; };

// template<class S1, class S2> struct concat;

// template<unsigned... I1, unsigned... I2>
// struct concat<seq<I1...>, seq<I2...>>
//   : seq<I1..., (sizeof...(I1)+I2)...>{};

// template<class S1, class S2>
// using Concat = Invoke<concat<S1, S2>>;

// template<unsigned N> struct gen_seq;
// template<unsigned N> using GenSeq = Invoke<gen_seq<N>>;

// template<unsigned N>
// struct gen_seq : Concat<GenSeq<N/2>, GenSeq<N - N/2>>{};

// template<> struct gen_seq<0> : seq<>{};
// template<> struct gen_seq<1> : seq<0>{};


namespace std
{
    template<typename T> struct remove_reference { typedef T type; };
    template<typename T> struct remove_reference<T&> { typedef T type; };
    template<typename T> struct remove_reference<T&&> { typedef T type; };

    template<typename T>
    using remove_reference_t = typename remove_reference<T>::type;

    template <typename T>
    constexpr typename std::remove_reference_t<T>&& move(T&& obj) noexcept {
        return static_cast<typename std::remove_reference_t<T>&&>(obj);
    }

    // template <class T> T&& forward(typename remove_reference<T>::type& t) noexcept;
    // template <class T> T&& forward(typename remove_reference<T>::type&& t) noexcept;

}
