#pragma once

#include <kernel/lock.hpp>


namespace std
{
    class mutex: public kspinlock<false> {  };

    template <typename lock_type = std::mutex>
    class lock_guard;
}




template <typename lock_type>
class std::lock_guard
{
private:
    lock_type &m_lock;

public:
    lock_guard( lock_type &lck )
    : m_lock(lck) { m_lock.lock(); }

    ~lock_guard() { m_lock.unlock(); }

    lock_guard (const lock_guard& ) = delete;
    lock_guard &operator=( const lock_guard& ) = delete;

};

