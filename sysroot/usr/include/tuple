#pragma once
#include <libc++>

namespace std
{
    template <typename T, typename U>
    struct pair
    {
        T first;
        U second;
    
        pair( const T &t, const U &u )
        :   first(t), second(u) {  }
    };

    template <typename T, typename U>
    std::pair<T, U> make_pair( const T &t, const U &u )
    {
        return std::pair<T, U>(t, u);
    }





    template<typename First, typename... Rest>
    struct tuple: public tuple<Rest...> {
    tuple(First first, Rest... rest): tuple<Rest...>(rest...), first(first) {}

    First first;
    };

    template<typename First>
    struct tuple<First> {
    tuple(First first): first(first) {}

    First first;
    };

    template<int index, typename First, typename... Rest>
    struct GetImpl {
    static auto value(const tuple<First, Rest...>* t) -> decltype(GetImpl<index - 1, Rest...>::value(t)) {
        return GetImpl<index - 1, Rest...>::value(t);
    }
    };

    template<typename First, typename... Rest>
    struct GetImpl<0, First, Rest...> {
    static First value(const tuple<First, Rest...>* t) {
        return t->first;
    }
    };

    template<int index, typename First, typename... Rest>
    auto get(const tuple<First, Rest...>& t) -> decltype(GetImpl<index, First, Rest...>::value(&t)) { //typename Type<index, First, Rest...>::value {
    return GetImpl<index, First, Rest...>::value(&t);
    }



}

