#pragma once

#include <stdint.h>
#include <kdef.h>


namespace std
{
    template<bool B, class T = void>
    struct enable_if {  };
     
    template<class T>
    struct enable_if<true, T> { typedef T type; };

    template< bool B, class T = void >
    using enable_if_t = typename enable_if<B,T>::type;



    template <class T, T v>
    struct integral_constant {
        static constexpr T value = v;
        typedef T value_type;
        typedef integral_constant<T,v> type;
        constexpr operator T() { return v; }
    };

    using true_type  = integral_constant<bool, true>;
    using false_type = integral_constant<bool, false>;


    // std::is_integral
    // ---------------------------------------------------------------------------
    template <typename T, typename U>
    struct is_same: std::false_type {  };

    template <typename T>
    struct is_same<T, T>: std::true_type {  };

    template <typename T, typename U>
    inline constexpr
    bool is_same_v = is_same<T, U>::value;
    // ---------------------------------------------------------------------------



    // std::is_integral
    // ---------------------------------------------------------------------------
    template <typename T>
    struct is_integral: std::false_type {  };

    template<> struct is_integral<uint8_t>:   std::true_type {  };
    template<> struct is_integral<uint16_t>:  std::true_type {  };
    template<> struct is_integral<uint32_t>:  std::true_type {  };
    template<> struct is_integral<uint64_t>:  std::true_type {  };
    template<> struct is_integral<uint128_t>: std::true_type {  };

    template<> struct is_integral<int8_t>:    std::true_type {  };
    template<> struct is_integral<int16_t>:   std::true_type {  };
    template<> struct is_integral<int32_t>:   std::true_type {  };
    template<> struct is_integral<int64_t>:   std::true_type {  };
    template<> struct is_integral<int128_t>:  std::true_type {  };

    template <typename T>
    inline constexpr
    bool is_integral_v = is_integral<T>::value;
    // ---------------------------------------------------------------------------



    // std::is_floating_point
    // ---------------------------------------------------------------------------
    // template <typename T>
    // struct is_floating_point: std::false_type {  };

    // template<> struct is_floating_point<_Float16>:    std::true_type {  };
    // template<> struct is_floating_point<float>:       std::true_type {  };
    // template<> struct is_floating_point<double>:      std::true_type {  };
    // template<> struct is_floating_point<long double>: std::true_type {  };
    // template<> struct is_floating_point<float128_t>:  std::true_type {  };

    // template <typename T>
    // inline constexpr
    // bool is_floating_point_v = is_floating_point<T>::value;
    // ---------------------------------------------------------------------------

}
